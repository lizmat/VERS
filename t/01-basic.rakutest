use Test;
use VERS;  # also makes VersionConstraint available

my @simple =
  "*", (1..10).pick ~ ".0", Any,
   "1.0", "1.0", "2.0",
  ">1.0", "2.0", "1.0",
 ">=2.0", "2.0", "1.0",
 "!=1.0", "2.0", "1.0",
  "<2.0", "1.0", "2.0",
 "<=1.0", "1.0", "2.0",
;

plan 29 + @simple / 3;

sub check-vers($source, $ok, $nok, $stringified = $source) is test-assertion {
    subtest "Checking VERS '$source'" => {
        plan $nok ?? 6 !! 5;

        is-deeply VERS($source), True, 'is the source ok';

        my $vers = VERS.new($source);
        isa-ok $vers, VERS;

        is-deeply $ok ~~ $vers, True, "is '$ok' acceptable";

        if $nok {
            is-deeply $nok ~~ $vers, False, "is '$nok' NOT acceptable";
        }

        is $vers.Str,  $stringified, "does '$source' stringify ok";
        is $vers.gist, $stringified, "does '$source' gist ok";
    }
}

for @simple -> $source, $ok, $no {
    check-vers "vers:raku/$source", $ok, $no;
}

check-vers "vers:raku/3.0|1.0|2.0", "1.0", "1.1", "vers:raku/1.0|2.0|3.0";
check-vers "vers:raku/3.0||1.0||2.0", "1.0", "1.1", "vers:raku/1.0|2.0|3.0";

check-vers "vers:raku/>2.0|>1.0",   "2.0", "1.0", "vers:raku/>1.0";
check-vers "vers:raku/>=2.0|>1.0",  "2.0", "1.0", "vers:raku/>1.0";
check-vers "vers:raku/<2.0|<1.0",   "1.0", "2.0", "vers:raku/<2.0";
check-vers "vers:raku/<=2.0|<1.0",  "1.0", "3.0", "vers:raku/<=2.0";

check-vers "vers:raku/!=2.0|!=1.0", "1.1", "1.0", "vers:raku/!=2.0|!=1.0";
check-vers "vers:raku/>=2.0|!=1.0", "2.0", "1.0", "vers:raku/!=1.0|>=2.0";

check-vers "vers:raku/<2.0|>1.0", "1.0", "2.1",
  "vers:raku/>1.0|<2.0";
check-vers "vers:raku/>2.0|<=1.0", "1.0", "2.0",
  "vers:raku/<=1.0|>2.0";
check-vers "vers:raku/!=3.0|<2.0|>1.0", "1.0", "3.0",
  "vers:raku/!=3.0|>1.0|<2.0";

for
  "*",    "vers:raku/*",
  "1.0",  "vers:raku/1.0",
  "1.0+", "vers:raku/>=1.0"
-> $source, $vers {
    is VERS.from-Version($source),         $vers, "$source from string";
    is VERS.from-Version($source.Version), $vers, "$source from Version";
}

for
  \(),
  \(:scheme(Any)),
  "foobar",
  "vers:",
  "vers:raku",
  "vers:raku/|||",
  "vers:raku/*|1.0",
  "vers:raku/1.0|1.0",
  "vers:raku/>=1.0|1.0",
  "vers:raku/>=1.0|!2.0"
{
    dies-ok { VERS.new(|$_) }, "'$_.raku()' dies as expected";
}

nok VERS::Type("alpm").Version ~~ Failure,
  '.Version returns a non-Failure';
nok VERS::Type("alpm").Version("1.0") ~~ Failure,
  '.Version("1.0") returns a non-Failure';

# vim: expandtab shiftwidth=4
